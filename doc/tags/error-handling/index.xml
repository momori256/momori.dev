<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Error-Handling on Momori Nakano</title>
    <link>http://localhost:1313/tags/error-handling/</link>
    <description>Recent content in Error-Handling on Momori Nakano</description>
    <generator>Hugo -- 0.123.7</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/error-handling/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust Error Handling: thiserror, anyhow, and When to Use Each</title>
      <link>http://localhost:1313/posts/rust-error-handling-thiserror-anyhow/</link>
      <pubDate>Tue, 06 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/rust-error-handling-thiserror-anyhow/</guid>
      <description>In this blog post, we&amp;rsquo;ll explore strategies for streamlining error handling in Rust using two popular libraries: thiserror and anyhow. We&amp;rsquo;ll discuss their features, use cases, and provide insights on when to choose each library.
TL;DR thiserror simplifies the implementation of custom error type, removing boilerplates anyhow consolidates errors that implement std::error::Error While thiserror provides detailed error information for specific reactions, anyhow hides internal details Return Different Error Types from Function Let&amp;rsquo;s start by creating a function decode() for illustration.</description>
    </item>
  </channel>
</rss>
