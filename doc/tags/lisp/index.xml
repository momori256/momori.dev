<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Lisp on Momori Nakano</title>
    <link>http://localhost:1313/tags/lisp/</link>
    <description>Recent content in Lisp on Momori Nakano</description>
    <generator>Hugo -- 0.123.7</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/lisp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Lisp-like Language from Scratch in Rust</title>
      <link>http://localhost:1313/posts/building-a-lisp-like-language-from-scratch-in-rust/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/building-a-lisp-like-language-from-scratch-in-rust/</guid>
      <description>This post delves into building an interpreter for a Lisp-like language using Rust. No knowledge beyond Rust basics is required to follow this post.
Inspiration and Project Overview Inspired by Stepan Parunashvili&amp;rsquo;s article Risp (in (Rust) (Lisp)), I created lip, an interpreted language designed for logical operations with a Lisp-like syntax. This supports logical operations (not, and, or), branching (if expression), lambda functions, and variable definition.
This post guides you through the process of building an interpreter, focusing on the core functionalities of tokenizing, parsing, and evaluating expressions.</description>
    </item>
  </channel>
</rss>
